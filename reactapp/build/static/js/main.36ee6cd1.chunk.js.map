{"version":3,"sources":["components/Editor/TextEditor.js","components/Editor/BoldMark.js","components/Editor/ItalicMark.js","components/Editor/FormatToolbar.js","components/Right/Title.js","components/Graph/Graph.js","components/Calendar/Calendar.js","App.js","serviceWorker.js","Login.js","Register.js","index.js"],"names":["TextEditor","props","onChange","value","setState","console","log","state","onKeyDown","e","change","ctrlKey","preventDefault","key","toggleMark","renderMark","mark","type","attributes","children","onMarkClick","Value","fromJSON","jsonData","submitEntry","bind","xhr","XMLHttpRequest","addEventListener","open","this","document","text","send","editable","onPointerDown","className","icon","bold","italic","code","list","underline","variant","onClick","style","margin","readOnly","Component","BoldMark","ItalicMark","property","fontSize","FormatToolbar","Title","editing","myFunction","color","maxWidth","backgroundColor","boxShadow","padding","borderRadius","title","rating","date","Graph","options","legend","display","posts","entryDate","entryScore","i","length","score","push","fetch","then","response","json","setAxis","data","canvas","gradientStroke","getContext","createLinearGradient","addColorStop","labels","datasets","label","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","Calendar","today","Date","selectedDate","onClickDay","setMoodColor","toISOString","substr","maxDate","tileClassName","App","width","float","React","Boolean","window","location","hostname","match","Login","Register","routing","basename","exact","path","component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36ee6cd1.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport {Editor} from 'slate-react';\nimport {Value} from 'slate';\n\nimport Icon from 'react-icons-kit';\nimport {bold} from 'react-icons-kit/feather/bold';\nimport {italic} from 'react-icons-kit/feather/italic';\nimport {code} from 'react-icons-kit/feather/code';\nimport {list} from 'react-icons-kit/feather/list';\nimport {underline} from 'react-icons-kit/feather/underline';\nimport Button from 'react-bootstrap/Button'\n\nimport {BoldMark, ItalicMark, FormatToolbar} from '.';\nimport divWithClassName from \"react-bootstrap/es/utils/divWithClassName\";\n\n\nexport default class TextEditor extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n          value: Value.fromJSON(this.props.jsonData)\n      };\n      this.submitEntry = this.submitEntry.bind(this);\n    }\n\n    // componentDidMount() {\n    // \tthis.setState({value:Value.fromJSON(this.props.jsonData)})\n    // }\n\n    // On change, update the app's React state with the new editor value.\n    onChange = ({value}) => {\n        this.setState({value});\n        console.log(this.state.value);\n    };\n\n    onKeyDown = (e, change) => {\n        /*\n            we want all our commands to start with the user pressing ctrl,\n            if they don't--we cancel the action.\n        */\n\n        if (!e.ctrlKey) {\n            return;\n        }\n\n        e.preventDefault();\n\n        /* Decide what to do based on the key code... */\n        switch (e.key) {\n            /* When \"b\" is pressed, add a \"bold\" mark to the text. */\n            case 'b': {\n                change.toggleMark('bold');\n                return true;\n            }\n            case 'i': {\n                change.toggleMark('italic');\n                return true;\n            }\n\n            case 'c': {\n                change.toggleMark('code');\n                return true;\n            }\n\n            case 'l': {\n                change.toggleMark('list');\n                return true;\n            }\n\n            case 'u': {\n                change.toggleMark('underline');\n                return true;\n            }\n            default: {\n                return;\n            }\n        }\n    };\n\n    renderMark = (props) => {\n        switch (props.mark.type) {\n            case 'bold':\n                return <BoldMark {...props} />;\n\n            case 'italic':\n                return <ItalicMark {...props} />;\n\n            case 'code':\n                return <code {...props.attributes}>{props.children}</code>;\n\n            case 'list':\n                return (\n                    <ul {...props.attributes}>\n                        <li>{props.children}</li>\n                    </ul>\n                );\n\n            case 'underline':\n                return <u {...props.attributes}>{props.children}</u>;\n\n            default: {\n                return;\n            }\n        }\n    };\n\n    onMarkClick = (e, type) => {\n        /* disabling browser default behavior like page refresh, etc */\n        e.preventDefault();\n\n        /* grabbing the this.state.value */\n        const {value} = this.state;\n\n        /*\n            applying the formatting on the selected text\n            which the desired formatting\n        */\n        const change = value.change().toggleMark(type);\n\n        /* calling the  onChange method we declared */\n        this.onChange(change);\n    };\n\n    submitEntry() {\n        //alert(\"submit\")\n        // create a new XMLHttpRequest\n        const xhr = new XMLHttpRequest();\n        // get a callback when the server responds\n        xhr.addEventListener('load', () => {\n        });\n        // open the request with the verb and the url\n        xhr.open('POST', '/new_post?title=testTitle&content='+this.state.value.document.text);\n        console.log(this.state.value.document.text);\n        // send the request\n        xhr.send()\n    }\n\n\n    render() {\n        if (this.props.editable == \"True\") {\n            return (\n                <div>\n                    <Fragment>\n                        <FormatToolbar>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'bold')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={bold}/>\n                            </button>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'italic')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={italic}/>\n                            </button>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'code')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={code}/>\n                            </button>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'list')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={list}/>\n                            </button>\n                            <button\n                                onPointerDown={(e) => this.onMarkClick(e, 'underline')}\n                                className=\"tooltip-icon-button\"\n                            >\n                                <Icon icon={underline}/>\n                            </button>\n                        </FormatToolbar>\n                        <Editor\n                            value={this.state.value}\n                            onChange={this.onChange}\n                            onKeyDown={this.onKeyDown}\n                            renderMark={this.renderMark}\n                        />\n\n                        {/*<Button variant=\"success\"*/}\n                        <Button variant=\"success\" onClick={this.submitEntry} style={{margin:\"20px\"}}>Submit</Button>\n                        {/*onClick={this.submitEntry()}*/}\n                        {/*>Success</Button>*/}\n\n\n                    </Fragment>\n\n                </div>\n\n            );\n        } else {\n            return (\n                <Fragment>\n                    <Editor\n                        value={this.state.value}\n                        onChange={this.onChange}\n                        onKeyDown={this.onKeyDown}\n                        renderMark={this.renderMark}\n                        readOnly\n                    />\n\n                </Fragment>\n            );\n        }\n\n    }\n}\n","import React from 'react';\n\nconst BoldMark = props => (\n\t<strong>\n\t\t{props.children}\n\t</strong>\n);\n\nexport default BoldMark;\n","import React from 'react'\n\nconst ItalicMark = props => (\n\t<em property=\"italic\" style={{fontSize:28}}>\n\t\t{props.children}\n\t</em>\n);\n\nexport default ItalicMark;\n","import React from \"react\";\n\nconst FormatToolbar = (props) => (\n\t<div className=\"format-toolbar\">{props.children}</div>\n);\n\nexport default FormatToolbar;\n","import React, {Component} from 'react';\nimport {TextEditor} from \"../../components/Editor\";\n\nclass Title extends Component {\n    state = {\n        editing: false,\n        jsonData: {\n            \"object\": \"value\",\n            \"document\": {\n                \"object\": \"document\",\n                \"nodes\": [\n                    {\n                        \"object\": \"block\",\n                        \"type\": \"paragraph\",\n                        \"nodes\": [\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"This is editable \"\n                            },\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"rich\",\n                                \"marks\": [\n                                    {\n                                        \"type\": \"bold\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"object\": \"text\",\n                                \"text\": \" text, \"\n                            },\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"much\",\n                                \"marks\": [\n                                    {\n                                        \"type\": \"italic\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"object\": \"text\",\n                                \"text\": \" better than a \"\n                            },\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"<textarea>\",\n                                \"marks\": [\n                                    {\n                                        \"type\": \"code\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"!\"\n                            }\n                        ]\n                    },\n                    {\n                        \"object\": \"block\",\n                        \"type\": \"paragraph\",\n                        \"nodes\": [\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"Since it's rich text, you can do things like turn a selection of text \"\n                            },\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"bold\",\n                                \"marks\": [\n                                    {\n                                        \"type\": \"bold\"\n                                    }\n                                ]\n                            },\n                            {\n                                \"object\": \"text\",\n                                \"text\": \", or add a semantically rendered block quote in the middle of the page, like this:\"\n                            }\n                        ]\n                    },\n                    {\n                        \"object\": \"block\",\n                        \"type\": \"block-quote\",\n                        \"nodes\": [\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"A wise quote.\"\n                            }\n                        ]\n                    },\n                    {\n                        \"object\": \"block\",\n                        \"type\": \"paragraph\",\n                        \"nodes\": [\n                            {\n                                \"object\": \"text\",\n                                \"text\": \"Try it out for yourself!\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        },\n    };\n\n    myFunction = (e) => {\n        this.setState({\n            editing: true\n        })\n    };\n\n    render() {\n        if (!this.state.editing) {\n            return (\n                <div style={{\n                    color: \"rgb(17, 17, 17)\",\n                    maxWidth: \"740px\",\n                    backgroundColor: \"rgb(255, 255, 255)\",\n                    boxShadow: \"rgba(118, 143, 255, 0.1) 0px 16px 24px 0px\",\n                    padding: \"20px\",\n                    margin: \"25px auto 25px\",\n                    borderRadius: \"4.5px\"\n                }}\n                     onClick={this.myFunction}\n                >\n                    <h1>{this.props.title} | {this.props.rating}</h1>\n                    <h3>{this.props.date}</h3>\n                </div>\n            );\n        } else {\n            return (\n                <div style={{\n                    color: \"rgb(17, 17, 17)\",\n                    maxWidth: \"740px\",\n                    backgroundColor: \"rgb(255, 255, 255)\",\n                    boxShadow: \"rgba(118, 143, 255, 0.1) 0px 16px 24px 0px\",\n                    padding: \"20px\",\n                    margin: \"25px auto 25px\",\n                    borderRadius: \"4.5px\"\n                }}>\n\n                    <TextEditor editable={this.props.editable}\n                                jsonData={{\n                        \"object\": \"value\",\n                        \"document\": {\n                            \"object\": \"document\",\n                            \"nodes\": [\n                                {\n                                    \"object\": \"block\",\n                                    \"type\": \"paragraph\",\n                                    \"nodes\": [\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"This is editable \"\n                                        },\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"rich\",\n                                            \"marks\": [\n                                                {\n                                                    \"type\": \"bold\"\n                                                }\n                                            ]\n                                        },\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \" text, \"\n                                        },\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"much\",\n                                            \"marks\": [\n                                                {\n                                                    \"type\": \"italic\"\n                                                }\n                                            ]\n                                        },\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \" better than a \"\n                                        },\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"<textarea>\",\n                                            \"marks\": [\n                                                {\n                                                    \"type\": \"code\"\n                                                }\n                                            ]\n                                        },\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"!\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"object\": \"block\",\n                                    \"type\": \"paragraph\",\n                                    \"nodes\": [\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"Since it's rich text, you can do things like turn a selection of text \"\n                                        },\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"bold\",\n                                            \"marks\": [\n                                                {\n                                                    \"type\": \"bold\"\n                                                }\n                                            ]\n                                        },\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \", or add a semantically rendered block quote in the middle of the page, like this:\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"object\": \"block\",\n                                    \"type\": \"block-quote\",\n                                    \"nodes\": [\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"A wise quote.\"\n                                        }\n                                    ]\n                                },\n                                {\n                                    \"object\": \"block\",\n                                    \"type\": \"paragraph\",\n                                    \"nodes\": [\n                                        {\n                                            \"object\": \"text\",\n                                            \"text\": \"Try it out for yourself!\"\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    }}/>\n                </div>\n\n            )\n        }\n\n    }\n}\n\nexport default Title;","import React, {Component} from 'react';\nimport {Line} from 'react-chartjs-2';\nimport './Graph.css';\n\nclass Graph extends Component {\n    constructor(props){\n        super(props);\n        // set graph options\n        this.state = {\n            options: {\n                legend: {\n                    display: false\n                }\n            },\n            posts: [],\n            entryDate: [],\n            entryScore: [],\n        }\n    }\n\n    setAxis() {\n        for (let i = 0; i < this.state.posts.length; i++){\n            console.log(this.state.posts[i].date);\n            console.log(this.state.posts[i].score);\n            this.state.entryDate.push(this.state.posts[i].date);\n            this.state.entryScore.push(this.state.posts[i].score);\n        }\n    }\n\n    componentDidMount() {\n        fetch('http://mental-health-api.herokuapp.com/get_calendar')\n            .then(response => response.json())\n            .then(({ posts }) => {\n                this.setState({ posts });\n                this.setAxis();\n            });\n    }\n\n    render() {\n        const moodData = (canvas) => {\n            // create gradient\n            const ctx = canvas.getContext(\"2d\")\n            const gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);\n            gradientStroke.addColorStop(0, \"#80b6f4\");\n            gradientStroke.addColorStop(0.2, \"#94d973\");\n            gradientStroke.addColorStop(0.5, \"#fad874\");\n            gradientStroke.addColorStop(1, \"#f49080\");\n            return {\n                // set x-axis labels\n                labels: this.state.entryDate,\n                // customize data\n                datasets: [\n                    {\n                        label: 'Mood Chart',\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: gradientStroke,\n                        borderColor: gradientStroke,\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: gradientStroke,\n                        pointBackgroundColor: gradientStroke,\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 5,\n                        pointHoverBackgroundColor: gradientStroke,\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 2,\n                        pointRadius: 1,\n                        pointHitRadius: 10,\n                        // y-axis data\n                        data: this.state.entryScore,\n                    }\n                ]\n            }\n        };\n        return (\n            <div>\n                <h1 className=\"text-center\">Your mood graph!</h1>\n                <Line\n                    data={moodData}\n                    options={this.state.options}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Graph;","import React, {Component} from 'react';\nimport DatePicker from 'react-calendar';\nimport './Calendar.css';\n\n\nclass Calendar extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            today: new Date(),\n            selectedDate : new Date(),\n            posts: [],\n        };\n        this.onClickDay = this.onClickDay.bind(this);\n        this.setMoodColor = this.setMoodColor.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('http://mental-health-api.herokuapp.com/get_calendar')\n            .then(response => response.json())\n            .then(({ posts }) => {\n                this.setState({ posts });\n            });\n    }\n\n    // onClickDay(date) sets the selectedDate and opens the corresponding entry\n    onClickDay(date) {\n        this.setState({selectedDate:date});\n        // should open corresponding entry\n    }\n\n    // setMoodColor(date) sets the mood coloring scale for the given date\n    // if there was an entry on that date (else leaves it blank)\n    setMoodColor({ date }) {\n        // format given date\n        let entryDate = date.toISOString().substr(0, 10);\n        let entryScore;\n        for (let i = 0; i < this.state.posts.length; i++){\n            // loop through array until matching entry\n            console.log(this.state.posts[i].date);\n            if (this.state.posts[i].date === entryDate){\n                // sets mood rate of the entry\n                entryScore = this.state.posts[i].score;\n                break;\n            }\n        }\n        // sets mood coloring\n        if (entryScore >= 85) {\n            return 'great-mood';\n        } else if (entryScore >= 65) {\n            return 'good-mood';\n        } else if (entryScore >= 45) {\n            return 'ok-mood';\n        } else {\n            return 'bad-mood';\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className=\"text-center\">Your mood calendar!</h1>\n                <DatePicker\n                    // can't have future entries\n                    maxDate={this.state.today}\n                    // select an entry\n                    onClickDay={this.onClickDay}\n                    // sets the mood coloring scale\n                    tileClassName={this.setMoodColor}\n                    className={\"w-100\"}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Calendar;\n","import React from 'react';\nimport { TextEditor } from \"./components/Editor\";\nimport Title from \"./components/Right/Title\";\nimport Graph from \"./components/Graph/Graph\";\nimport Calendar from \"./components/Calendar/Calendar\";\n\nclass App extends React.Component{\n    render() {\n        return <div>\n            <div style={{\n                width:\"40%\",\n                padding:\"5%\",\n                float:\"left\"\n            }}>\n\n                <div style={{\n                    color: \"rgb(17, 17, 17)\",\n                    maxWidth: \"740px\",\n                    backgroundColor: \"rgb(255, 255, 255)\",\n                    boxShadow: \"rgba(118, 143, 255, 0.1) 0px 16px 24px 0px\",\n                    padding: \"20px\",\n                    margin: \"25px auto 25px\",\n                    borderRadius: \"4.5px\"\n                }}\n                >\n                    <Graph/>\n                </div>\n                <div style={{\n                    color: \"rgb(17, 17, 17)\",\n                    maxWidth: \"740px\",\n                    backgroundColor: \"rgb(255, 255, 255)\",\n                    boxShadow: \"rgba(118, 143, 255, 0.1) 0px 16px 24px 0px\",\n                    padding: \"20px\",\n                    margin: \"25px auto 25px\",\n                    borderRadius: \"4.5px\"\n                }}\n                >\n                    <Calendar/>\n                </div>\n            </div>\n            <div style={{\n                width:\"40%\",\n                padding:\"5%\",\n                float:\"left\",\n            }}>\n                <Title title=\"+ Create New Post\" editable=\"True\"/>\n                <Title title=\"Went to my First Hackathon!\" rating=\"84%\" date=\"September 3rd, 2018\" editable=\"False\"/>\n                <Title title=\"Won my First Hackathon\" rating=\"100%\" date=\"September 3rd, 2018\" editable=\"False\"/>\n                <Title title=\"School is hard\"  rating=\"22%\" date=\"September 3rd, 2018\" editable=\"False\"/>\n                <Title title=\"Went to my First Hackathon!\" rating=\"84%\" date=\"September 3rd, 2018\" editable=\"False\"/>\n                <Title title=\"Won my First Hackathon\" rating=\"100%\" date=\"September 3rd, 2018\" editable=\"False\"/>\n                <Title title=\"School is hard\"  rating=\"22%\" date=\"September 3rd, 2018\" editable=\"False\"/>\n            </div>\n\n        </div>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Login</h1>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\n\nclass Register extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Register</h1>\n      </div>\n    );\n  }\n}\n\nexport default Register;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport Login from './Login'\nimport Register from './Register'\nimport './Index.css';\n\nconst routing = (\n  <Router basename=\"#\">\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}